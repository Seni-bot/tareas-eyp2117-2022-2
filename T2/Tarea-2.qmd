---
title: "Tarea 2 EYP2117"
format: 
  html: 
    self-contained: true
    code-summary: "Código"
editor: visual
lang: es
theme: superhero
fontsize: 85%
---

::: {style="text-align: center"}
# [Pregunta 1]{.underline}
:::

## Considere una función de densidad de la forma:

$$
f(x) \propto \dfrac{x+2\cdot\sin(x)}{\exp(x)},\quad x\geq 0.
$$

### a) Grafique la función para $0<x<2$.

```{r}
## a)----

fx <- function(x){
  fx <- (x+(2*sin(x)))/(exp(x))
  return(fx)
}

par(bg = "#5D7487")
curve(fx, from = 0, to = 2, ylim = c(0,1.5),
      main = "Función f(x)",
      ylab = "f(x)", xlab = "x",
      lwd = 2)
```

### b) Se quiere generar una variable aleatoria proviniente de $f(x)$ utilizando el método aceptación/rechazo. Proponga una distribución generadora de candidatos y calcule el valor de la constante $c$.

```{r}
## b)----
# Proponemos una densidad gamma con shape = 2

f_g <- function(x){
  f_g <- fx(x)/dgamma(x, shape = 2)
  return(f_g)
}

optim <- optimise(f_g, maximum = TRUE, interval = c(0,2))
cc <- optim$objective
print(paste("El valor c para f(x) es",round(cc)))
```

### c) En una sola figura, grafique la función objetivo en color negro, la función generadora de candidatos en color rojo y la función de propuestas multiplicada por la constante $c$, en color verde.

```{r}
## c)----
par(bg = "#5D7487")
curve(fx, from = 0, to = 10, lwd = 2, ylim = c(0,1.5), ylab = "" )

curve(dgamma(x,shape = 2), from = 0, to = 10,lwd = 2,
      add =TRUE, col = "red")

curve(cc*dgamma(x,shape = 2), from = 0, to = 10,lwd = 2,
      add =TRUE, col = "green")

```

### d) Implemente una función que reciba como argumento el número de variables aleatorias que se desea generar, $N$, y retorne un vector con las $N$ variables simuladas, la tasa de aceptación del algoritmo y la constante de normalización de $f(x)$.

```{r}
## d)----
acep_rech <- function(n){
  aceptados <- 0
  rechazados <- 0
  simulaciones <- c()
  
  while(length(simulaciones) < n){
    y <- rgamma(1, shape = 2)
    u <- runif(1)
    
    if(u <=(1/cc)*fx(y)/dgamma(y, shape = 2)){
      aceptados <- aceptados + 1
      simulaciones <- append(simulaciones, y)
    }else{
      rechazados <- rechazados +1
    }
  }
  tasa_acep <- aceptados/(aceptados + rechazados)
  
  const_norm <- 1/(cc*tasa_acep)
  
  return(list(simulaciones,tasa_acep,const_norm))
}
```

### e) Simule $N = 100, 1.000,10.000$ y $20.000$ variables aleatorias desde $f(x)$. Realice una figura que permita comparar la forma del histograma de cada una de las muestras, suponiendo la densidad objetivo.

```{r}
## e)----

par(mfrow = c(2,2),
    bg = "#5D7487")

N <- 100
test_1 <- acep_rech(N)
hist(test_1[[1]], probability = TRUE, breaks = 40, ylim = c(0,1),
     ylab = "Densidad", xlab = "Simulaciones",
     main = "N = 100")
curve(fx(x)*test_1[[3]],lwd = 3,
      add =TRUE, col = "blue")

N <- 1000
test_2 <- acep_rech(N)
hist(test_2[[1]], probability = TRUE, breaks = 40, ylim = c(0,1),
     ylab = "Densidad", xlab = "Simulaciones",
     main = "N = 1000")
curve(fx(x)*test_2[[3]],lwd = 3,
      add =TRUE, col = "red")

N <- 10000
test_3 <- acep_rech(N)
hist(test_3[[1]], probability = TRUE, breaks = 40, ylim = c(0,1),
     ylab = "Densidad", xlab = "Simulaciones",
     main = "N = 10000")
curve(fx(x)*test_3[[3]],lwd = 3,
      add =TRUE, col = "green")

N <- 20000
test_4 <- acep_rech(N)
hist(test_4[[1]], probability = TRUE, breaks = 45, ylim = c(0,1),
     ylab = "Densidad", xlab = "Simulaciones",
     main = "N = 20000")
curve(fx(x)*test_4[[3]],lwd = 3,
      add =TRUE, col = "darkmagenta")
```

::: {style="text-align: center"}
# [Pregunta 2]{.underline}
:::

## Considere una función de densidad formada por la mezcla equiprobable de distribuciones Normales, cada una con los siguientes pares de parámetros: $(\mu_1 = -1, \sigma_1^2 = 1/4), (\mu_2=0,\sigma_2^2=1)$ y $(\mu_3 = 1, \sigma_3^2 = 1/2).$

### a) Realice un gráfico que muestre la función $f(x)$ en color rojo y superponga cada una de las distribuciones que forman la mezcla, en color azul.

```{r}
## a) ----
par(bg = "#5D7487")
mezcla <- function(x){
  mez <- 1/3*dnorm(x, mean = -1, sd = 1/2) +
    1/3*dnorm(x, mean = 0, sd = 1) +
    1/3*dnorm(x, mean = 1, sd = sqrt(1/2))
  return(mez)
}

par(mfrow =c(1,1))

curve(mezcla(x), from = -10, to = 10, lwd = 2, col = "red", ylim = c(0,1.8))

curve(dnorm(x, mean = -1, sd = 1/2), lwd = 2,lty = 2, add = TRUE, col = "blue")

curve(dnorm(x, mean = 0, sd = 1), lwd = 2, lty = 2, add = TRUE, col = "blue")

curve(dnorm(x, mean = 1, sd = sqrt(1/2)), lwd = 2,lty = 2, add = TRUE, col = "blue")
```

### b) Implemente una función que reciba como argumento el número de variables aleatorias que se desea generar, $N$, y retorne las $N$ variables simuladas utilizando el método polar.

```{r}
## b)----

polar.method <- function(N){
  
  simulaciones <- c()
  while(length(simulaciones) < N){
    U1 <- runif(1)
    U2 <- runif(1)
    
    v1 <- 2*U1-1
    v2 <- 2*U2-1
    
    s <- v1^2+v2^2
    
    if(s<=1){
      
      X <- v1*(-2*log(s)/s)^{1/2}
      
      simulaciones <- append(simulaciones, X)
      
    }
  }
  return(simulaciones)
}

composicion <- function(N){
  vars <- polar.method(N)
  comp <- c()
  for(i in 1:N){
    U <- runif(1)
    if(U < 1/3){
      see <- vars[i]*(1/2)+(-1)
      comp <- append(comp,see)
    }
    if(U>1/3 & U < 2/3){
      comp <- append(comp, vars[i])
    }
    if(U > 2/3){
      see <- vars[i]*(sqrt(1/2))+(1)
      comp <- append(comp, see)
    }
  }
  return(comp)
}
```

### c) Simule muestras de tamaño $N = 100,1.000, 10.000$ y $20.000$ desde $f(x)$ y realice una figura que permita comparar la forma del histograma de cada una de las muestras, superponiendo la densidad objetivo.

```{r}
## c)----

par(mfrow = c(2,2),
    bg = "#5D7487")

N <- 100
hist(composicion(N), probability = TRUE, main ="N = 100",
     xlab = "x", ylab = "Densidad", breaks = 40, ylim = c(0,1))
curve(mezcla, from = -10, to = 10, add = T, col = "red", lwd = 2)

N <- 1000
hist(composicion(N), probability = TRUE, main ="N = 1000",
     xlab = "x", ylab = "Densidad", breaks = 40, ylim = c(0,1))
curve(mezcla, from = -10, to = 10, add = T, col = "red", lwd = 2)


N <- 10000
hist(composicion(N), probability = TRUE, main ="N = 10000",
     xlab = "x", ylab = "Densidad", breaks = 40, ylim = c(0,1))
curve(mezcla, from = -10, to = 10, add = T, col = "red", lwd = 2)


N <- 20000
hist(composicion(N), probability = TRUE, main ="N = 20000",
     xlab = "x", ylab = "Densidad", breaks = 40, ylim = c(0,1))
curve(mezcla, from = -10, to = 10, add = T, col = "red", lwd = 2)
```

### d) Implemente una función que reciba como argumento el número de variables aleatorias que se desea generar, $N$, y retorne las $N$ variables simuladas mediante la transformación de Box-Muller.

```{r}
## d)----

box.muller <- function(N){
  sims <- c()
  
  while(length(sims) < N){
    U <- runif(1)
    V <- runif(1)
    
    X <- sqrt(-2*log(1-U))*cos(2*pi*V)
    
    sims <- c(sims,X)
  }

  return(sims)
}

composicion <- function(N){
  vars <- box.muller(N)
  comp <- c()
  for(i in 1:N){
    U <- runif(1)
    if(U < 1/3){
      see <- vars[i]*(sqrt(1/4))+(-1)
      comp <- append(comp,see)
    }
    if(U>1/3 & U < 2/3){
      comp <- append(comp, vars[i])
    }
    if(U > 2/3){
      see <- vars[i]*(sqrt(1/2))+(1)
      comp <- append(comp, see)
    }
  }
  return(comp)
}
```

### e) Simule muestras de tamaño $N = 100,1.000, 10.000$ y $20.000$ desde $f(x)$ y realice una figura que permita comparar la forma del histograma de cada una de las muestras generadas en el apartado anterior, suponiendo la densidad objetivo.

```{r}
## e)----

par(mfrow = c(2,2),
    bg = "#5D7487")

N <- 100
hist(composicion(N), probability = TRUE, main ="N = 100",
     xlab = "x", ylab = "Densidad", breaks = 40, ylim = c(0,1))
curve(mezcla, from = -10, to = 10, add = T, col = "red", lwd = 2)

N <- 1000
hist(composicion(N), probability = TRUE, main ="N = 1000",
     xlab = "x", ylab = "Densidad", breaks = 40, ylim = c(0,1))
curve(mezcla, from = -10, to = 10, add = T, col = "red", lwd = 2)


N <- 10000
hist(composicion(N), probability = TRUE, main ="N = 10000",
     xlab = "x", ylab = "Densidad", breaks = 40, ylim = c(0,1))
curve(mezcla, from = -10, to = 10, add = T, col = "red", lwd = 2)


N <- 20000
hist(composicion(N), probability = TRUE, main ="N = 20000",
     xlab = "x", ylab = "Densidad", breaks = 40, ylim = c(0,1))
curve(mezcla, from = -10, to = 10, add = T, col = "red", lwd = 2)
```

### f) Comente sus resultados.

Podemos ver que tanto con el Método Polar que con el Método de Box - Muller, realizan una buena aproximación a lo que sería la composición de las tres distribuciones normales. Esto se puede ver de manera detallada en los gráficos mostrados anteriormente.

Otra cosa que podemos apreciar es que a medida que aumentamos el valor de $N$, las simulaciones se acercan más a la forma real de $f(x)$.

::: {style="text-align: center"}
# [Pregunta 3]{.underline}
:::

## Considere la siguiente función de densidad:

$$
f(x) = p_1 \cdot f_1(x) + p_2 \cdot f_2(x), \quad x \in \mathbb{R},
$$

## donde $f_1(x)$ corresponde a una distribución Normal$(4,3)$, $f_2(x)$ a una densidad Gama con parámetros $(shape = 10, rate = 0.7)$ y $(p_1 + p_2) = 1.$

### a) Realice un gráfico con ambas funciones, $f_1(x)$ y $f_2(x)$.

```{r}
## a)----

par(mfrow = c(1,1),
    bg = "#5D7487")
curve(dnorm(x, mean = 4, sd = sqrt(3)), from = -10, to = 40, lwd = 2, col = "red",
      main = "Normal(4,3) y Gama(shape = 10, rate = 0.7)", ylab = "Densidad")
curve(dgamma(x, shape = 10, rate = 0.7),from = -10, to = 40, lwd = 2, col = "blue",
      add = TRUE)
legend(x = "topright",
       inset = .02,
       lty = c(1,1), 
       col= c("red","blue"), 
       legend=c("Normal", "Gama"),
       cex = 0.8)
```

### b) Implemente una función que reciba como argumento el tamaño de la muestra que se desea generar, $N$, y el valor de $p_1$, y retorne la muestra obtenida.

```{r}
## b)----

fx <- function(x){
  fx <- (((0.7)^10)/gamma(10))*x^(10-1)*exp(-0.7*x)
  return(fx)
}

f_g <- function(x){
  f_g <- fx(x)/dweibull(x, shape = 2.5, scale = 13)
  return(f_g)
}

c <- optimise(f_g, maximum = TRUE, interval = c(0,30))$objective


simu.gamma <- function(N){
  simulaciones <- c()
  
  while(length(simulaciones) < N){
    U <- runif(1)
    y <- rweibull(1, shape = 2.5, scale = 13)
    
    if(U <= (1/c)*fx(y)/dweibull(y,shape = 2.5, scale = 13)){
      simulaciones <- append(simulaciones, y)
    }
  }
  return(simulaciones)
}

# Para simular normales usaré el método polar (función polar.method(N))

compos <- function(N, p1){
  simu <- c()
  for(i in 1:N){
    U <- runif(1)
    
    if(U < p1){
      ans <- polar.method(1)
      ans <- (ans * sqrt(3)) + 4 # "Des-estandarizamos" la muestra N(0,1) a N(4,3)
      simu <- append(simu,ans)
    }else{
      simu <- append(simu, simu.gamma(1))
    }
  }
  return(simu)
}
```

### c) Simule muestras de tamaño $N = 10^5$ desde $f(x)$ para los casos en que $p_1=0,0.5,1$. Realice una figura que permita comparar los histogramas de las muestras generadas con la función $f(x)$ correspondiente superpuesta al histograma. Comente.

```{r}
## c) ----
par(mfrow = c(2,2),
    bg = "#5D7487")
N <- 10^5

################# Para p1 = 0 #################
p1_1 <- 0
aux1 <- compos(N, p1_1)
hist(aux1,
     probability = TRUE,
     main = "N = 10^5, p1 = 0",
     breaks = 50,
     ylim = c(0,0.15),
     xlab = "X")

fx <- function(x){
  fx <- dgamma(x, shape = 10, rate = 0.7)
  return(fx)
}

curve(fx, add = TRUE, lwd = 2, col = "red")

##############################################

################# Para p1 = 0.5 ##############

p1_2 <- 0.5
aux2 <-compos(N, p1_2)
hist(aux2,
     probability = TRUE,
     main = "N = 10^5, p1 = 0.5",
     ylim = c(0,0.2),
     breaks = 30,
     xlab = "X")

fx <- function(x){
  fx <- 1/2 * dnorm(x, mean = 4, sd = sqrt(3)) +
    1/2 * dgamma(x, shape = 10, rate = 0.7)
  return(fx)
}

curve(fx, add = TRUE, lwd = 2, col = "red")

##############################################


################# Para p1 = 1 ################

p1_3 <- 1
aux3 <- compos(N, p1_3)
hist(aux3,
     probability = TRUE,
     main = "N = 10^5, p1 = 1",
     breaks = 50,
     ylim = c(0,0.25),
     xlab = "X")

fx <- function(x){
  fx <- dnorm(x, mean = 4, sd = sqrt(3)) 
  return(fx)
}

curve(fx, add = TRUE, lwd = 2, col = "red")

##############################################
```

Podemos observar que tanto para $p_1 = 0, 0.5, 1$, se cumple que el histograma se asemeja bastante al comportamiento de $f(x)$. Esto se puede explicar dado al buen algoritmo de simulación de muestras $Normal(4,3)$, y al de simulacion de muestras $Gama(shape = 10, rate = 0.7)$, además de la gran cantidad de simulaciones que estamos obteniendo, en este caso $N = 10^5$.

### d) Compare sus resultados con los obtenidos mediante las funciones `rnorm(...)` y `rgamma(...)` incluidas en R, para los mismos valores de $N$ y $p_1$.

```{r}
#| echo: false
#| message: false

basic_theme <- function(data, ...){
  data %>% 
    tab_options(
      table.background.color = "#0F2537",
      ...
    )
}
```

```{r}
## d)----
library(gt)

############### Para p1 = 0 ###################

# valores simulados
simu <- aux1
comparativa_1a <- list(Tipo = "simulada",
                       Media = mean(simu),
                       D.estandar = sd(simu),
                       Varianza = var(simu))

# valores "reales"

real <- rgamma(N, shape = 10, rate = 0.7)
comparativa_1b <- list(Tipo = "real",
                       Media = mean(real),
                       D.estandar = sd(real),
                       Varianza = var(real))

df <- data.frame(Tipo = c(),
                 Media = c(),
                 D.estandar = c(),
                 Varianza = c())

df <- rbind(df, comparativa_1a)
df <- rbind(df, comparativa_1b)

gt(df) |> 
  tab_header(
    title = "Comparativa p1 = 0"
  ) |> 
  basic_theme(
  ) |> 
  tab_options(
    table.width = pct(100)
  )

###############################################

############### Para p1 = 0.5 #################

# valores simulados
simu <- aux2
comparativa_2a <- list(Tipo = "simulada",
                       Media = mean(simu),
                       D.estandar = sd(simu),
                       Varianza = var(simu))

# valores "reales"

real <- 0.5 * rnorm(N, mean = 4, sd = sqrt(3)) + 0.5*rgamma(N, shape = 10, rate = 0.7)
comparativa_2b <- list(Tipo = "real",
                       Media = mean(real),
                       D.estandar = sd(real),
                       Varianza = var(real))

df <- data.frame(Tipo = c(),
                 Media = c(),
                 D.estandar = c(),
                 Varianza = c())

df <- rbind(df, comparativa_2a)
df <- rbind(df, comparativa_2b)

gt(df) |> 
  tab_header(
    title = "Comparativa p1 = 0.5"
  )|> 
  basic_theme(
  ) |> 
  tab_options(
    table.width = pct(100)
  )

###############################################

############### Para p1 = 1 ###################

# valores simulados
simu <- aux3
comparativa_3a <- list(Tipo = "simulada",
                       Media = mean(simu),
                       D.estandar = sd(simu),
                       Varianza = var(simu))

# valores "reales"

real <- rnorm(N, mean = 4, sd = sqrt(3))
comparativa_3b <- list(Tipo = "real",
                       Media = mean(real),
                       D.estandar = sd(real),
                       Varianza = var(real))

df <- data.frame(Tipo = c(),
                 Media = c(),
                 D.estandar = c(),
                 Varianza = c())

df <- rbind(df, comparativa_3a)
df <- rbind(df, comparativa_3b)

gt(df) |> 
  tab_header(
    title = "Comparativa p1 = 1"
  )|> 
  basic_theme(
  ) |> 
  tab_options(
    table.width = pct(100)
  )
```

Podemos apreciar que para $p_1 = 0, 0.5, 1$, las medias($\mu$) son bastante similares, sin embargo cuando $p_1 = 0.5$, notamos una gran variación en la desviación estándar($\sigma$) y en su varianza($\sigma^2$). Esto se puede explicar debido a que con el método de composición, tenemos una probabilidad $p_1 = 0.5$ de generar muestras $Normal(4,3)$ y una probabilidad $p_2 = 0.5$ de generar muestras $Gama(shape = 10, rate = 0.7)$, lo que genera (tal como se ve en el gráfico del item 3.a) una gran distancia entre las muestras, provocando así una gran varianza y por consecuencia, una gran desviación estándar. Y cuando calculamos una muestra proveniente de $f(x) = 0.5\cdot Normal(4,3) + 0.5\cdot Gama(10,0.7)$, en R, este 0.5 lo considera como un peso que le da a cada valor de las muestras, y como no hay una probabilidad en el cálculo, las muestras estarán mas cercanas unas de otras.
