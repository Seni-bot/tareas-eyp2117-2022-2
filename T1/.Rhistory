library(plotly)
install.packages("plotly")
library(plotly)
library(ggplot2)
library(plotly)
p <- plot_ly(z = volcano, type = "surface")
p
(volcano)
rango_x <- seq(0,3,0.01)
rango_x
rango_y <- seq(0,2,0.01)
integral <- function(x,y){
hx <-  x*y^2*sqrt(x^2+y^3)
return(hx)
}
rango_x <- seq(0,3,0.01)
rango_y <- seq(0,2,0.01)
resultados <- NULL
for(i in 1:length(rango_x)){
for(j in 1:length(rango_y)){
resultados <- c(resultados, integral(rango_x[i],rango_y[j]))
}
}
length(resultados)
resultados
volcano
type(volcano)
typeof(volcano)
a <- volcano
View(a)
rango_x <- seq(0,3,0.1)
rango_y <- seq(0,2,0.1)
resultados <- NULL
for(i in 1:length(rango_x)){
for(j in 1:length(rango_y)){
resultados <- c(resultados, integral(rango_x[i],rango_y[j]))
}
}
resultados
rango_x <- seq(0,3,0.01)
rango_y <- seq(0,2,0.01)
resultados <- NULL
for(i in 1:length(rango_x)){
for(j in 1:length(rango_y)){
resultados <- c(resultados, integral(rango_x[i],rango_y[j]))
}
}
sum(resultados)
library(pracma)
install.packages("pracma")
?pracma::integral2
integral2(integral, 0, 3, 0, 2)
pracma::integral2(integral, 0, 3, 0, 2)
?sum}
?sum
plot(resultados)
resultados)
(resultados)
?persp
integral <- function(x,y){
hx <-  x*y^2*sqrt(x^2+y^3)
return(hx)
}
rango_x <- seq(0,3,length = 50)
rango_y <- seq(0,2,length = 50)
z <- outer(rango_x,rango_y,integral)
persp(rango_x, rango_y, z)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
col = "blue"
)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
col = "cyan"
)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 30, phi = 15,
col = "cyan"
)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 40, phi = 15,
col = "cyan"
)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 100, phi = 15,
col = "cyan"
)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 75, phi = 15,
col = "cyan"
)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 20, phi = 15,
col = "cyan"
)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 35, phi = 15,
col = "cyan"
)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 35, phi = 100,
col = "cyan"
)
15
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 35, phi = 15,
col = "cyan"
)
estimador <- function(N){
U1 <- runif(N,0,3)
U2 <- runif(N,0,2)
hx <- U1*U2^2*sqrt(U1^2+U2^3)
return(hx)
}
N = 10^2
estimador(N)
mean(estimador(N))
N = 10^5
mean(estimador(N))
N = 10^5
U1 <- runif(N,0,3)
U2 <- runif(N,0,2)
hx <- U1*U2^2*sqrt(U1^2+U2^3)
hx
estimador <- function(N){
U1 <- runif(N,0,3)
U2 <- runif(N,0,2)
hx <- U1*U2^2*sqrt(U1^2+U2^3)
return(hx)
}
N = 10^5
mean(estimador(N))
mean(estimador(N))
mean(estimador(N))
pracma::integral2(integral, 0, 3, 0, 2)
estimador <- function(N){
U1 <- runif(N,)
U2 <- runif(N)
hx <- U1*U2^2*sqrt(U1^2+U2^3)
return(hx)
}
N = 10^5
mean(estimador(N))
estimador <- function(N){
U1 <- runif(N)
U2 <- runif(N)
hx <- U1*U2^2*sqrt(U1^2+U2^3)
return(hx)
}
N = 10^5
mean(estimador(N))
estimador <- function(N){
U1 <- runif(N,0,3)
U2 <- runif(N,0,2)
hx <- U1*U2^2*sqrt(U1^2+U2^3)*1/3*1/2
return(hx)
}
N = 10^5
mean(estimador(N))
estimador <- function(N){
U1 <- runif(N,0,3)
U2 <- runif(N,0,2)
hx <- U1*U2^2*sqrt(U1^2+U2^3)*6
return(hx)
}
N = 10^5
mean(estimador(N))
pracma::integral2(integral, 0, 3, 0, 2)
estimador <- function(N){
U1 <- runif(N,0,3)
U2 <- runif(N,0,2)
hx <- U1*U2^2*sqrt(U1^2+U2^3)*6
return(mean(hx))
}
## d) ----
N = 10^5
estimador(N)
N_1 <- 10^2
N_2 <- 10^3
N_3 <- 10^4
estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3))
estimaciones
valor_real <- pracma::integral2(integral, 0, 3, 0, 2)
valor_real
valor_real <- pracma::integral2(integral, 0, 3, 0, 2)
## d) ----
N_1 <- 10^2
N_2 <- 10^3
N_3 <- 10^4
(estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3)))
(valor_real <- pracma::integral2(integral, 0, 3, 0, 2))
## d) ----
N_1 <- 10^2
N_2 <- 10^3
N_3 <- 10^4
(estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3)))
(estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3)))
(estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3)))
set.seed(2117)
integral <- function(x,y){
hx <-  x*y^2*sqrt(x^2+y^3)
return(hx)
}
rango_x <- seq(0,3,length = 50)
rango_y <- seq(0,2,length = 50)
z <- outer(rango_x,rango_y,integral)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 35, phi = 15,
col = "cyan"
)
estimador <- function(N){
U1 <- runif(N,0,3)
U2 <- runif(N,0,2)
hx <- U1*U2^2*sqrt(U1^2+U2^3)*6 #tengo que justificar el pq *6 (tiene que ver con los rangos de las uniformes [0,3][0,2])
return(mean(hx))
}
## d) ----
N_1 <- 10^2
N_2 <- 10^3
N_3 <- 10^4
(estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3)))
(valor_real <- pracma::integral2(integral, 0, 3, 0, 2))
## d) ----
N_1 <- 10^2
N_2 <- 10^3
N_3 <- 10^4
(estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3)))
## d) ----
N_1 <- 10^2
N_2 <- 10^3
N_3 <- 10^4
(estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3)))
(valor_real <- pracma::integral2(integral, 0, 3, 0, 2))
set.seed(2117)
integral <- function(x,y){
hx <-  x*y^2*sqrt(x^2+y^3)
return(hx)
}
rango_x <- seq(0,3,length = 50)
rango_y <- seq(0,2,length = 50)
z <- outer(rango_x,rango_y,integral)
persp(rango_x, rango_y, z,
main = "Volumen a integrar",
xlab = "x",
ylab = "y",
theta = 35, phi = 15,
col = "cyan"
)
N_1 <- 10^2
N_2 <- 10^3
N_3 <- 10^4
estimaciones <- c(estimador(N_1),estimador(N_2), estimador(N_3))
valor_real <- pracma::integral2(integral, 0, 3, 0, 2)
print(estimaciones, valor_real)
#Valor real
(valor_real <- pracma::integral2(integral, 0, 3, 0, 2))
integral <- function(x,y){
hx <-  x*y^2*sqrt(x^2+y^3)
return(hx)
}
#Valor real
(valor_real <- pracma::integral2(integral, 0, 3, 0, 2))
typeof(valor_real)
valor_real[1]
funcion_ppartes <- function(a,b,N){
U <- runif(N)
vector_respuesta <- NULL
for(i in 1:N){
if(U<1/2){
hx <- 2*a+(b-a)sqrt(2*U)
funcion_ppartes <- function(a,b,N){
U <- runif(N)
vector_respuesta <- NULL
for(i in 1:N){
if(U<1/2){
hx <- 2*a+(b-a)*sqrt(2*U)
vector_respuesta <- c(vector_respuesta,hx)
}else{
hx <- 2*b+(a-b)*sqrt(2(1-U))
vector_respuesta <- c(vector_respuesta,hx)
}
}
return(vector_respuesta)
}
N = 10^4
a = 0
b = 5
funcion_ppartes(a,b,N)
funcion_ppartes <- function(a,b,N){
U <- runif(N)
vector_respuesta <- NULL
for(i in 1:N){
if(U[i]<1/2){
hx <- 2*a+(b-a)*sqrt(2*U[i])
vector_respuesta <- c(vector_respuesta,hx)
}else{
hx <- 2*b+(a-b)*sqrt(2(1-U[i]))
vector_respuesta <- c(vector_respuesta,hx)
}
}
return(vector_respuesta)
}
N = 10^4
a = 0
b = 5
funcion_ppartes(a,b,N)
N = 10^4
a = 0
b = 5
U <- runif(N)
U
vector_respuesta <- NULL
U[1] < 1/2
hx <- 2*b+(a-b)*sqrt(2(1-U[i]))
?sqrt
funcion_ppartes <- function(a,b,N){
U <- runif(N)
vector_respuesta <- NULL
for(i in 1:N){
if(U[i]<1/2){
hx <- 2*a+(b-a)*sqrt(2*U[i])
vector_respuesta <- c(vector_respuesta,hx)
}else{
hx <- 2*b+(a-b)*sqrt(2*(1-U[i]))
vector_respuesta <- c(vector_respuesta,hx)
}
}
return(vector_respuesta)
}
N = 10^4
a = 0
b = 5
funcion_ppartes(a,b,N)
hist(funcion_ppartes(a,b,N))
aux <- funcion_ppartes(a,b,N)
hist(aux)
lines(density(aux))
lines(density(aux), add = TRUE)
hist(aux, prob = T)
lines(density(aux), add = TRUE)
lines(density(aux))
par(mfrow = c(1,2))
hist(aux, prob = T)
par(mfrow = c(1,2))
hist(aux, prob = T)
plot(x,x/25, col = "red", lwd = 2, xlim = c(0,5))
x = seq(0,5,0.001)
plot(x,x/25, col = "red", lwd = 2, xlim = c(0,5))
N = 10^4
a = 0
b = 5
hx_1 <- function(x){
hx <- x/25
return(hx)
}
hx_2 <- function(x){
hx <- (10-x)/25
return(hx)
}
aux <- funcion_ppartes(a,b,N)
hist(aux, prob = T)
N = 10^4
a = 0
b = 5
hx_1 <- function(x){
hx <- x/25
return(hx)
}
hx_2 <- function(x){
hx <- (10-x)/25
return(hx)
}
aux <- funcion_ppartes(a,b,N)
hist(aux, prob = T)
?hist
curve(hx_1, from=0, to=5,add = TRUE)
curve(hx_2, from=5,to=10, add = TRUE)
hist(aux, prob = T, main= "Histograma funci贸n f(x)")
curve(hx_1, from=0, to=5,add = TRUE, col = "red", lwd = 2)
curve(hx_2, from=5,to=10, add = TRUE, col = "red", lwd = 2)
hist(aux, prob = T, main= "Histograma funci贸n f(x)", col = "darkorchid")
curve(hx_1, from=0, to=5, add = TRUE, col = "red", lwd = 2)
curve(hx_2, from=5, to=10, add = TRUE, col = "red", lwd = 2)
hist(aux, prob = T, main= "Histograma funci贸n f(x)", col = "forestgreen")
curve(hx_1, from=0, to=5, add = TRUE, col = "red", lwd = 2)
curve(hx_2, from=5, to=10, add = TRUE, col = "red", lwd = 2)
hist(aux, prob = T, main= "Histograma funci贸n f(x)", col = "forestgreen", xlab = "X")
curve(hx_1, from=0, to=5, add = TRUE, col = "red", lwd = 2)
curve(hx_2, from=5, to=10, add = TRUE, col = "red", lwd = 2)
curve(hx_1, from=0, to=5, add = TRUE, col = "red", lwd = 3)
curve(hx_2, from=5, to=10, add = TRUE, col = "red", lwd = 3)
hist(aux, prob = T, main= "Histograma f(x)", col = "forestgreen", xlab = "X")
### d) Implemente en $R$ el algoritmo descrito en el apartado anterior.
c <- (1,2,3,4,1,2,2,2,3,1)
hist(c)
c <- c(1,2,3,4,1,2,2,2,3,1)
hist(c)
hist(c, fig.dim = c(5,5))
